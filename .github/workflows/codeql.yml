name: "CodeQL Advanced Security"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run CodeQL analysis weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'

jobs:
  analyze:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        # Use the default queries plus security-extended and security-and-quality
        queries: +security-extended,security-and-quality
        # Custom CodeQL config file
        config-file: ./.github/codeql/codeql-config.yml

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true

    - name: Upload CodeQL results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: ${{ runner.temp }}/results/python.sarif

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        # Fail the action if any vulnerabilities are found
        fail-on-severity: moderate
        # Deny packages with known vulnerabilities
        deny-licenses: GPL-2.0, GPL-3.0
        # Allow certain license types
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        # Comment on PR with summary
        comment-summary-in-pr: true

  semgrep:
    name: Semgrep Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    container:
      image: returntocorp/semgrep

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Semgrep
      run: |
        semgrep \
          --config=auto \
          --json \
          --output=semgrep-results.json \
          --error \
          --strict \
          --verbose \
          src/

    - name: Upload Semgrep results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: semgrep-results
        path: semgrep-results.json

    - name: Comment on PR with Semgrep results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('semgrep-results.json')) {
            const results = JSON.parse(fs.readFileSync('semgrep-results.json', 'utf8'));
            
            if (results.results && results.results.length > 0) {
              let comment = '## 🔍 Semgrep Security Analysis\n\n';
              comment += `Found ${results.results.length} potential security issue(s):\n\n`;
              
              results.results.forEach((result, index) => {
                comment += `### Issue ${index + 1}: ${result.check_id}\n`;
                comment += `**Severity:** ${result.extra.severity}\n`;
                comment += `**File:** \`${result.path}\` (line ${result.start.line})\n`;
                comment += `**Message:** ${result.message}\n\n`;
                
                if (result.extra.fix) {
                  comment += `**Suggested Fix:** ${result.extra.fix}\n\n`;
                }
              });
              
              comment += '\nPlease review and address these security findings before merging.';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: '## ✅ Semgrep Security Analysis\n\nNo security issues found!'
              });
            }
          }