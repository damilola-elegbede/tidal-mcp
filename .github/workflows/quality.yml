name: Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run quality checks daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  FORCE_COLOR: 1
  PY_COLORS: 1

jobs:
  code-quality:
    name: Code Quality Assessment
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add radon xenon vulture

    - name: Code complexity analysis with radon
      run: |
        echo "## Cyclomatic Complexity" >> quality-report.md
        uv run radon cc src/ --min B --show-complexity >> quality-report.md
        echo "" >> quality-report.md
        
        echo "## Maintainability Index" >> quality-report.md
        uv run radon mi src/ --min B >> quality-report.md
        echo "" >> quality-report.md

    - name: Check for code duplication
      run: |
        echo "## Code Duplication" >> quality-report.md
        # Simple duplication check using grep for common patterns
        if grep -r "def.*def.*def" src/ || grep -r "class.*class.*class" src/; then
          echo "⚠️ Potential code duplication detected" >> quality-report.md
        else
          echo "✅ No obvious code duplication found" >> quality-report.md
        fi
        echo "" >> quality-report.md

    - name: Dead code detection with vulture
      run: |
        echo "## Dead Code Analysis" >> quality-report.md
        uv run vulture src/ --min-confidence 80 >> quality-report.md || echo "✅ No dead code detected" >> quality-report.md
        echo "" >> quality-report.md

    - name: Code metrics with xenon
      run: |
        echo "## Complexity Metrics" >> quality-report.md
        uv run xenon --max-average B --max-modules B --max-absolute B src/ >> quality-report.md
        echo "" >> quality-report.md

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: quality-report.md

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add safety pip-audit

    - name: Run safety check
      run: |
        uv run safety check --json --output safety-report.json
        uv run safety check --short-report
      continue-on-error: true

    - name: Run pip-audit
      run: |
        uv run pip-audit --format=json --output=pip-audit-report.json
        uv run pip-audit --format=text
      continue-on-error: true

    - name: Check for outdated dependencies
      run: |
        echo "## Dependency Status" > dependency-report.md
        echo "" >> dependency-report.md
        
        # Check UV lock file age
        if [ -f uv.lock ]; then
          LOCK_AGE=$(( ($(date +%s) - $(stat -c %Y uv.lock)) / 86400 ))
          echo "🔒 Lock file age: ${LOCK_AGE} days" >> dependency-report.md
          if [ $LOCK_AGE -gt 30 ]; then
            echo "⚠️ Lock file is older than 30 days - consider updating dependencies" >> dependency-report.md
          fi
        fi
        echo "" >> dependency-report.md

    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-audit
        path: |
          safety-report.json
          pip-audit-report.json
          dependency-report.md

  performance-regression:
    name: Performance Regression Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add pytest-benchmark

    - name: Run performance tests
      run: |
        uv run pytest tests/ -k "test_performance" -v --benchmark-json=benchmark-results.json
      env:
        TIDAL_CLIENT_ID: test_client_id
        TIDAL_CLIENT_SECRET: test_client_secret

    - name: Store benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      if: github.ref == 'refs/heads/main'
      with:
        tool: 'pytest'
        output-file-path: benchmark-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        auto-push: true
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: true

  documentation-quality:
    name: Documentation Quality Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --dev
        uv add pydocstyle docstring-coverage

    - name: Check docstring coverage
      run: |
        echo "## Documentation Coverage" > doc-quality-report.md
        echo "" >> doc-quality-report.md
        uv run docstring-coverage src/ --badge=doc-coverage.svg >> doc-quality-report.md
        echo "" >> doc-quality-report.md

    - name: Check docstring style
      run: |
        echo "## Docstring Style" >> doc-quality-report.md
        uv run pydocstyle src/ >> doc-quality-report.md || echo "✅ Docstring style is compliant" >> doc-quality-report.md
        echo "" >> doc-quality-report.md

    - name: Validate README structure
      run: |
        echo "## README Quality" >> doc-quality-report.md
        
        # Check for required sections
        REQUIRED_SECTIONS=("Installation" "Usage" "Configuration" "Contributing")
        for section in "${REQUIRED_SECTIONS[@]}"; do
          if grep -qi "$section" README.md; then
            echo "✅ $section section found" >> doc-quality-report.md
          else
            echo "❌ $section section missing" >> doc-quality-report.md
          fi
        done
        echo "" >> doc-quality-report.md

    - name: Validate examples
      run: |
        echo "## Example Code Quality" >> doc-quality-report.md
        
        # Syntax check all Python examples
        EXAMPLE_COUNT=0
        ERROR_COUNT=0
        
        for file in examples/*.py; do
          if [ -f "$file" ]; then
            EXAMPLE_COUNT=$((EXAMPLE_COUNT + 1))
            if python -m py_compile "$file" 2>/dev/null; then
              echo "✅ $(basename "$file") - syntax valid" >> doc-quality-report.md
            else
              echo "❌ $(basename "$file") - syntax error" >> doc-quality-report.md
              ERROR_COUNT=$((ERROR_COUNT + 1))
            fi
          fi
        done
        
        echo "" >> doc-quality-report.md
        echo "📊 Examples: $EXAMPLE_COUNT total, $ERROR_COUNT errors" >> doc-quality-report.md

    - name: Upload documentation quality report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-quality
        path: |
          doc-quality-report.md
          doc-coverage.svg

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev
        uv add pip-licenses

    - name: Check licenses
      run: |
        echo "## License Compliance Report" > license-report.md
        echo "" >> license-report.md
        
        echo "### Project License" >> license-report.md
        if [ -f LICENSE ]; then
          echo "✅ License file found" >> license-report.md
          echo "License type: $(head -n 1 LICENSE)" >> license-report.md
        else
          echo "❌ No LICENSE file found" >> license-report.md
        fi
        echo "" >> license-report.md
        
        echo "### Dependency Licenses" >> license-report.md
        uv run pip-licenses --format=markdown >> license-report.md

    - name: Upload license compliance report
      uses: actions/upload-artifact@v4
      with:
        name: license-compliance
        path: license-report.md

  consolidate-reports:
    name: Consolidate Quality Reports
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-audit, documentation-quality, license-compliance]
    if: always()
    steps:
    - name: Download all reports
      uses: actions/download-artifact@v4

    - name: Consolidate reports
      run: |
        echo "# 📊 Quality Gate Report" > consolidated-quality-report.md
        echo "" >> consolidated-quality-report.md
        echo "Generated on: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> consolidated-quality-report.md
        echo "Commit: ${{ github.sha }}" >> consolidated-quality-report.md
        echo "" >> consolidated-quality-report.md
        
        # Combine all reports
        if [ -f quality-report/quality-report.md ]; then
          echo "# Code Quality" >> consolidated-quality-report.md
          cat quality-report/quality-report.md >> consolidated-quality-report.md
          echo "" >> consolidated-quality-report.md
        fi
        
        if [ -f dependency-audit/dependency-report.md ]; then
          echo "# Dependency Audit" >> consolidated-quality-report.md
          cat dependency-audit/dependency-report.md >> consolidated-quality-report.md
          echo "" >> consolidated-quality-report.md
        fi
        
        if [ -f documentation-quality/doc-quality-report.md ]; then
          cat documentation-quality/doc-quality-report.md >> consolidated-quality-report.md
          echo "" >> consolidated-quality-report.md
        fi
        
        if [ -f license-compliance/license-report.md ]; then
          cat license-compliance/license-report.md >> consolidated-quality-report.md
        fi

    - name: Upload consolidated report
      uses: actions/upload-artifact@v4
      with:
        name: consolidated-quality-report
        path: consolidated-quality-report.md

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('consolidated-quality-report.md')) {
            const report = fs.readFileSync('consolidated-quality-report.md', 'utf8');
            
            // Truncate if too long for GitHub comment
            const maxLength = 50000;
            const truncatedReport = report.length > maxLength 
              ? report.substring(0, maxLength) + '\n\n... (truncated - see full report in artifacts)'
              : report;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 📊 Quality Gate Report\n\n${truncatedReport}`
            });
          }