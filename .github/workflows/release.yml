name: Release

on:
  push:
    tags:
      - "v*"

env:
  FORCE_COLOR: 1
  PY_COLORS: 1

jobs:
  test:
    name: Run Tests Before Release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Install dependencies
      run: |
        uv sync --all-extras --dev

    - name: Run full test suite
      run: |
        uv run pytest tests/ -v --cov=src/tidal_mcp --cov-report=xml
      env:
        TIDAL_CLIENT_ID: test_client_id
        TIDAL_CLIENT_SECRET: test_client_secret

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Build package
      run: |
        uv build

    - name: Check package
      run: |
        uv add twine
        uv run twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [test, build]
    permissions:
      contents: write
      id-token: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Get tag
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      run: |
        # Extract changelog for this version from CHANGELOG.md
        VERSION=${{ steps.tag.outputs.tag }}
        # Remove 'v' prefix if present
        VERSION=${VERSION#v}
        
        # Extract the changelog section for this version
        if [ -f CHANGELOG.md ]; then
          # Find the section for this version
          sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
          
          # If no specific version found, use the latest changes
          if [ ! -s release_notes.md ]; then
            echo "## Changes" > release_notes.md
            echo "" >> release_notes.md
            echo "See full changelog at [CHANGELOG.md](CHANGELOG.md)" >> release_notes.md
          fi
        else
          echo "## Release ${{ steps.tag.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          echo "This release includes various improvements and bug fixes." >> release_notes.md
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.tag.outputs.tag }}
        body_path: release_notes.md
        files: |
          dist/*.tar.gz
          dist/*.whl
        draft: false
        prerelease: ${{ contains(steps.tag.outputs.tag, 'rc') || contains(steps.tag.outputs.tag, 'beta') || contains(steps.tag.outputs.tag, 'alpha') }}

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: 
      name: pypi
      url: https://pypi.org/p/tidal-mcp
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true

  publish-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, build]
    if: contains(github.ref, 'rc') || contains(github.ref, 'beta') || contains(github.ref, 'alpha')
    environment:
      name: testpypi
      url: https://test.pypi.org/p/tidal-mcp
    permissions:
      id-token: write
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        print-hash: true

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [release, publish-pypi]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get tag
      id: tag
      run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Notify about release
      run: |
        echo "âœ… Successfully released ${{ steps.tag.outputs.tag }}"
        echo "ðŸ“¦ Package available on PyPI: https://pypi.org/project/tidal-mcp/"
        echo "ðŸ“‹ Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}"