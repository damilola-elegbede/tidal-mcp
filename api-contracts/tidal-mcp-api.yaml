openapi: 3.0.3
info:
  title: Tidal MCP Server API
  version: 1.0.0
  description: |
    Production-ready Tidal Music Streaming MCP (Model Context Protocol) Server.

    This API provides comprehensive access to Tidal's music streaming platform through
    a standardized MCP interface with enterprise-grade features including rate limiting,
    comprehensive error handling, and robust authentication flows.

    ## Features
    - OAuth2 authentication with PKCE flow
    - Comprehensive music search and discovery
    - Playlist management and user library access
    - Streaming URL generation with quality selection
    - Rate limiting and quota management
    - Health monitoring and observability

  contact:
    name: Tidal MCP API Support
    email: support@tidal-mcp.com
    url: https://github.com/tidal-mcp/tidal-mcp
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  x-api-id: tidal-mcp-server
  x-audience: internal

servers:
  - url: https://api.tidal-mcp.com/v1
    description: Production server
  - url: https://staging-api.tidal-mcp.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Health and Status Endpoints
  /health:
    get:
      summary: Health check endpoint
      description: Returns the current health status of the Tidal MCP server
      operationId: healthCheck
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /status:
    get:
      summary: Detailed system status
      description: Returns detailed system status including dependencies and metrics
      operationId: getSystemStatus
      tags:
        - Health
      responses:
        '200':
          description: System status information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Authentication Endpoints
  /auth/login:
    post:
      summary: Initiate Tidal authentication
      description: |
        Starts the OAuth2 authentication flow with Tidal.
        Returns an authentication URL for the client to redirect to.
      operationId: initiateAuth
      tags:
        - Authentication
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: Authentication flow initiated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /auth/callback:
    post:
      summary: Handle OAuth2 callback
      description: Processes the OAuth2 callback and exchanges code for tokens
      operationId: handleAuthCallback
      tags:
        - Authentication
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCallbackRequest'
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Refreshes an expired access token using a refresh token
      operationId: refreshToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Search Endpoints
  /search:
    get:
      summary: Search across all content types
      description: |
        Comprehensive search across tracks, albums, artists, and playlists.
        Supports filtering by content type and pagination.
      operationId: searchContent
      tags:
        - Search
      parameters:
        - name: q
          in: query
          required: true
          description: Search query string
          schema:
            type: string
            minLength: 1
            maxLength: 500
            example: "Daft Punk Get Lucky"
        - name: type
          in: query
          required: false
          description: Content type filter
          schema:
            type: string
            enum: [all, tracks, albums, artists, playlists]
            default: all
        - name: limit
          in: query
          required: false
          description: Maximum number of results per type
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 20
        - name: offset
          in: query
          required: false
          description: Pagination offset
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: country_code
          in: query
          required: false
          description: Country code for region-specific results
          schema:
            type: string
            pattern: '^[A-Z]{2}$'
            example: "US"
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResults'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  # Track Endpoints
  /tracks/{trackId}:
    get:
      summary: Get track details
      description: Retrieve detailed information about a specific track
      operationId: getTrack
      tags:
        - Tracks
      parameters:
        - name: trackId
          in: path
          required: true
          description: Tidal track ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123456789"
      responses:
        '200':
          description: Track details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackDetails'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /tracks/{trackId}/stream-url:
    get:
      summary: Get track streaming URL
      description: |
        Generate a streaming URL for the specified track with quality selection.
        URLs are time-limited and should be used immediately.
      operationId: getTrackStreamUrl
      tags:
        - Tracks
        - Streaming
      parameters:
        - name: trackId
          in: path
          required: true
          description: Tidal track ID
          schema:
            type: string
            pattern: '^[0-9]+$'
            example: "123456789"
        - name: quality
          in: query
          required: false
          description: Audio quality preference
          schema:
            type: string
            enum: [LOW, HIGH, LOSSLESS, HI_RES]
            default: HIGH
        - name: format
          in: query
          required: false
          description: Audio format preference
          schema:
            type: string
            enum: [AAC, FLAC, MQA]
            default: AAC
      responses:
        '200':
          description: Streaming URL generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamingUrl'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Insufficient subscription level for requested quality
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '429':
          $ref: '#/components/responses/RateLimitError'

  /tracks/{trackId}/radio:
    get:
      summary: Get track radio
      description: Generate radio recommendations based on a seed track
      operationId: getTrackRadio
      tags:
        - Tracks
        - Discovery
      parameters:
        - name: trackId
          in: path
          required: true
          description: Seed track ID for radio generation
          schema:
            type: string
            pattern: '^[0-9]+$'
        - name: limit
          in: query
          required: false
          description: Maximum number of radio tracks
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Radio tracks generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RadioResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Playlist Endpoints
  /playlists:
    get:
      summary: Get user playlists
      description: Retrieve user's playlists with pagination support
      operationId: getUserPlaylists
      tags:
        - Playlists
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: User playlists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistCollection'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Create new playlist
      description: Create a new playlist for the authenticated user
      operationId: createPlaylist
      tags:
        - Playlists
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlaylistRequest'
      responses:
        '201':
          description: Playlist created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDetails'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /playlists/{playlistId}:
    get:
      summary: Get playlist details
      description: Retrieve detailed information about a specific playlist
      operationId: getPlaylist
      tags:
        - Playlists
      parameters:
        - name: playlistId
          in: path
          required: true
          description: Playlist ID or UUID
          schema:
            type: string
            example: "550e8400-e29b-41d4-a716-446655440000"
        - name: include_tracks
          in: query
          required: false
          description: Whether to include track list
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Playlist details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistDetails'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Delete playlist
      description: Delete a user's playlist
      operationId: deletePlaylist
      tags:
        - Playlists
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Playlist deleted successfully
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Insufficient permissions to delete playlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /playlists/{playlistId}/tracks:
    post:
      summary: Add tracks to playlist
      description: Add one or more tracks to a playlist
      operationId: addTracksToPlaylist
      tags:
        - Playlists
      parameters:
        - name: playlistId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTracksRequest'
      responses:
        '200':
          description: Tracks added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaylistModificationResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Favorites Endpoints
  /favorites/{type}:
    get:
      summary: Get user favorites
      description: Retrieve user's favorite tracks, albums, artists, or playlists
      operationId: getFavorites
      tags:
        - Favorites
      parameters:
        - name: type
          in: path
          required: true
          description: Type of favorites to retrieve
          schema:
            type: string
            enum: [tracks, albums, artists, playlists]
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: User favorites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoritesResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /favorites/{type}/{itemId}:
    put:
      summary: Add item to favorites
      description: Add a track, album, artist, or playlist to user's favorites
      operationId: addToFavorites
      tags:
        - Favorites
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [track, album, artist, playlist]
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item added to favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteActionResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    delete:
      summary: Remove item from favorites
      description: Remove a track, album, artist, or playlist from user's favorites
      operationId: removeFromFavorites
      tags:
        - Favorites
      parameters:
        - name: type
          in: path
          required: true
          schema:
            type: string
            enum: [track, album, artist, playlist]
        - name: itemId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item removed from favorites successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteActionResponse'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Discovery Endpoints
  /recommendations:
    get:
      summary: Get personalized recommendations
      description: Get personalized track recommendations based on user's listening history
      operationId: getRecommendations
      tags:
        - Discovery
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: seed_type
          in: query
          required: false
          description: Type of seed for recommendations
          schema:
            type: string
            enum: [favorites, recent, mixed]
            default: mixed
      responses:
        '200':
          description: Personalized recommendations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecommendationsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # User Profile
  /user/profile:
    get:
      summary: Get user profile
      description: Retrieve authenticated user's profile information
      operationId: getUserProfile
      tags:
        - User
      responses:
        '200':
          description: User profile information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  # Rate Limit Information
  /rate-limit:
    get:
      summary: Get rate limit status
      description: Check current rate limit status for the authenticated user
      operationId: getRateLimitStatus
      tags:
        - Rate Limiting
      responses:
        '200':
          description: Rate limit status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitStatus'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: OAuth2 Bearer token obtained from authentication flow
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service authentication

  schemas:
    # Core Data Models
    Artist:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Tidal artist ID
          example: "987654321"
        name:
          type: string
          description: Artist name
          example: "Daft Punk"
        url:
          type: string
          format: uri
          description: Artist profile URL
        picture:
          type: string
          format: uri
          description: Artist image URL
        popularity:
          type: integer
          minimum: 0
          maximum: 100
          description: Artist popularity score

    Album:
      type: object
      required:
        - id
        - title
        - artists
      properties:
        id:
          type: string
          description: Tidal album ID
          example: "123456789"
        title:
          type: string
          description: Album title
          example: "Random Access Memories"
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        release_date:
          type: string
          format: date
          description: Album release date
          example: "2013-05-17"
        duration:
          type: integer
          description: Total album duration in seconds
          minimum: 0
        number_of_tracks:
          type: integer
          description: Number of tracks in album
          minimum: 1
        cover:
          type: string
          format: uri
          description: Album cover image URL
        url:
          type: string
          format: uri
          description: Album URL
        explicit:
          type: boolean
          description: Whether album contains explicit content
          default: false

    Track:
      type: object
      required:
        - id
        - title
        - artists
      properties:
        id:
          type: string
          description: Tidal track ID
          example: "456789123"
        title:
          type: string
          description: Track title
          example: "Get Lucky"
        artists:
          type: array
          items:
            $ref: '#/components/schemas/Artist'
        album:
          $ref: '#/components/schemas/Album'
        duration:
          type: integer
          description: Track duration in seconds
          minimum: 0
          example: 248
        track_number:
          type: integer
          description: Track number on album
          minimum: 1
        disc_number:
          type: integer
          description: Disc number for multi-disc albums
          minimum: 1
          default: 1
        url:
          type: string
          format: uri
          description: Track URL
        stream_url:
          type: string
          format: uri
          description: Direct streaming URL (if available)
        explicit:
          type: boolean
          description: Whether track contains explicit content
          default: false
        quality:
          type: string
          enum: [LOW, HIGH, LOSSLESS, HI_RES]
          description: Available audio quality

    Playlist:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          description: Playlist ID or UUID
          example: "550e8400-e29b-41d4-a716-446655440000"
        title:
          type: string
          description: Playlist title
          example: "My Summer Hits"
        description:
          type: string
          description: Playlist description
        creator:
          type: string
          description: Playlist creator username
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        number_of_tracks:
          type: integer
          description: Total number of tracks
          minimum: 0
        duration:
          type: integer
          description: Total playlist duration in seconds
          minimum: 0
        created_at:
          type: string
          format: date-time
          description: Playlist creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
        image:
          type: string
          format: uri
          description: Playlist cover image URL
        url:
          type: string
          format: uri
          description: Playlist URL
        public:
          type: boolean
          description: Whether playlist is public
          default: true

    # Request/Response Models
    SearchResults:
      type: object
      properties:
        query:
          type: string
          description: Original search query
        content_type:
          type: string
          description: Content type filter applied
        results:
          type: object
          properties:
            tracks:
              type: array
              items:
                $ref: '#/components/schemas/Track'
            albums:
              type: array
              items:
                $ref: '#/components/schemas/Album'
            artists:
              type: array
              items:
                $ref: '#/components/schemas/Artist'
            playlists:
              type: array
              items:
                $ref: '#/components/schemas/Playlist'
        total_results:
          type: integer
          description: Total number of results across all types
          minimum: 0
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    StreamingUrl:
      type: object
      required:
        - url
        - quality
        - format
        - expires_at
      properties:
        url:
          type: string
          format: uri
          description: Time-limited streaming URL
        quality:
          type: string
          enum: [LOW, HIGH, LOSSLESS, HI_RES]
          description: Audio quality
        format:
          type: string
          enum: [AAC, FLAC, MQA]
          description: Audio format
        bitrate:
          type: integer
          description: Audio bitrate in kbps
          minimum: 64
        sample_rate:
          type: integer
          description: Sample rate in Hz
        expires_at:
          type: string
          format: date-time
          description: URL expiration timestamp
        track_id:
          type: string
          description: Associated track ID

    AuthRequest:
      type: object
      properties:
        redirect_uri:
          type: string
          format: uri
          description: Custom redirect URI for OAuth flow
        state:
          type: string
          description: State parameter for OAuth security

    AuthResponse:
      type: object
      required:
        - auth_url
        - state
      properties:
        auth_url:
          type: string
          format: uri
          description: OAuth2 authorization URL
        state:
          type: string
          description: State parameter for verification
        expires_in:
          type: integer
          description: URL validity duration in seconds

    AuthCallbackRequest:
      type: object
      required:
        - code
        - state
      properties:
        code:
          type: string
          description: OAuth2 authorization code
        state:
          type: string
          description: State parameter for verification

    AuthTokenResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: OAuth2 access token
        refresh_token:
          type: string
          description: OAuth2 refresh token
        token_type:
          type: string
          description: Token type (Bearer)
          example: "Bearer"
        expires_in:
          type: integer
          description: Token lifetime in seconds
        scope:
          type: string
          description: Granted token scope
        user:
          $ref: '#/components/schemas/UserProfile'

    TokenRefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Valid refresh token

    CreatePlaylistRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
          description: Playlist title
        description:
          type: string
          maxLength: 1000
          description: Playlist description
        public:
          type: boolean
          description: Whether playlist should be public
          default: true

    AddTracksRequest:
      type: object
      required:
        - track_ids
      properties:
        track_ids:
          type: array
          items:
            type: string
            pattern: '^[0-9]+$'
          minItems: 1
          maxItems: 100
          description: List of track IDs to add
        position:
          type: integer
          minimum: 0
          description: Position to insert tracks (0 = beginning)

    # Response Models
    HealthStatus:
      type: object
      required:
        - status
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
          description: Service version
        uptime:
          type: integer
          description: Service uptime in seconds

    SystemStatus:
      type: object
      properties:
        service:
          $ref: '#/components/schemas/HealthStatus'
        dependencies:
          type: object
          properties:
            tidal_api:
              $ref: '#/components/schemas/DependencyStatus'
            database:
              $ref: '#/components/schemas/DependencyStatus'
            cache:
              $ref: '#/components/schemas/DependencyStatus'
        metrics:
          type: object
          properties:
            requests_per_minute:
              type: number
            active_sessions:
              type: integer
            cache_hit_rate:
              type: number
              minimum: 0
              maximum: 1

    DependencyStatus:
      type: object
      required:
        - status
        - response_time_ms
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, timeout]
        response_time_ms:
          type: number
          minimum: 0
        last_checked:
          type: string
          format: date-time
        error_message:
          type: string

    TrackDetails:
      allOf:
        - $ref: '#/components/schemas/Track'
        - type: object
          properties:
            lyrics:
              type: string
              description: Track lyrics (if available)
            popularity:
              type: integer
              minimum: 0
              maximum: 100
              description: Track popularity score
            isrc:
              type: string
              description: International Standard Recording Code

    PlaylistDetails:
      allOf:
        - $ref: '#/components/schemas/Playlist'
        - type: object
          properties:
            followers:
              type: integer
              description: Number of playlist followers
              minimum: 0
            last_played:
              type: string
              format: date-time
              description: Last time playlist was played

    PlaylistCollection:
      type: object
      properties:
        playlists:
          type: array
          items:
            $ref: '#/components/schemas/Playlist'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    PlaylistModificationResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
        tracks_added:
          type: integer
          minimum: 0
        tracks_failed:
          type: array
          items:
            type: object
            properties:
              track_id:
                type: string
              error:
                type: string

    RadioResponse:
      type: object
      properties:
        seed_track_id:
          type: string
          description: Original seed track ID
        radio_tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        total_results:
          type: integer
          minimum: 0

    FavoritesResponse:
      type: object
      properties:
        content_type:
          type: string
          enum: [tracks, albums, artists, playlists]
        favorites:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Track'
              - $ref: '#/components/schemas/Album'
              - $ref: '#/components/schemas/Artist'
              - $ref: '#/components/schemas/Playlist'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    FavoriteActionResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
        message:
          type: string
        item_id:
          type: string
        content_type:
          type: string

    RecommendationsResponse:
      type: object
      properties:
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        total_results:
          type: integer
          minimum: 0
        seed_type:
          type: string
          enum: [favorites, recent, mixed]

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: User ID
        username:
          type: string
          description: Username
        country_code:
          type: string
          pattern: '^[A-Z]{2}$'
          description: User's country code
        subscription:
          type: object
          properties:
            type:
              type: string
              enum: [PREMIUM, HIFI, FREE]
            valid:
              type: boolean
            expires_at:
              type: string
              format: date-time

    RateLimitStatus:
      type: object
      required:
        - limit
        - remaining
        - reset_at
      properties:
        limit:
          type: integer
          description: Rate limit ceiling
        remaining:
          type: integer
          description: Remaining requests in current window
        reset_at:
          type: string
          format: date-time
          description: When the rate limit resets
        tier:
          type: string
          enum: [basic, premium, enterprise]
          description: User's rate limit tier

    PaginationInfo:
      type: object
      properties:
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
        has_more:
          type: boolean

    # Error Models
    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: Error code
          example: "TRACK_NOT_FOUND"
        message:
          type: string
          description: Human-readable error message
          example: "The requested track could not be found"
        details:
          type: object
          description: Additional error details
        timestamp:
          type: string
          format: date-time
          description: Error timestamp
        request_id:
          type: string
          description: Unique request identifier for tracking
        recovery_hints:
          type: array
          items:
            type: string
          description: Suggested actions to resolve the error

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            validation_errors:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                  code:
                    type: string
                  message:
                    type: string

  responses:
    BadRequestError:
      description: Bad request - invalid parameters or malformed request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'
      headers:
        X-Request-ID:
          schema:
            type: string
          description: Unique request identifier

    UnauthorizedError:
      description: Authentication required or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "AUTHENTICATION_REQUIRED"
            message: "Valid authentication token required"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_123456789"
            recovery_hints:
              - "Obtain a valid access token via /auth/login"
              - "Check that your token hasn't expired"
      headers:
        WWW-Authenticate:
          schema:
            type: string
          description: Authentication method required

    ForbiddenError:
      description: Insufficient permissions for the requested operation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFoundError:
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "RESOURCE_NOT_FOUND"
            message: "The requested track could not be found"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_123456789"
            recovery_hints:
              - "Verify the track ID is correct"
              - "Check if the track is available in your region"

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "RATE_LIMIT_EXCEEDED"
            message: "API rate limit exceeded. Please retry after the reset time."
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_123456789"
            recovery_hints:
              - "Wait until the rate limit resets"
              - "Consider upgrading to a higher tier for increased limits"
      headers:
        X-Rate-Limit-Limit:
          schema:
            type: integer
          description: Rate limit ceiling for the current tier
        X-Rate-Limit-Remaining:
          schema:
            type: integer
          description: Number of requests remaining in current window
        X-Rate-Limit-Reset:
          schema:
            type: string
            format: date-time
          description: When the rate limit resets
        Retry-After:
          schema:
            type: integer
          description: Seconds to wait before retrying

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error: "INTERNAL_SERVER_ERROR"
            message: "An unexpected error occurred while processing your request"
            timestamp: "2024-01-15T10:30:00Z"
            request_id: "req_123456789"
            recovery_hints:
              - "Please try again in a few moments"
              - "Contact support if the problem persists"

  parameters:
    LimitParam:
      name: limit
      in: query
      required: false
      description: Maximum number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    OffsetParam:
      name: offset
      in: query
      required: false
      description: Number of results to skip for pagination
      schema:
        type: integer
        minimum: 0
        default: 0

  headers:
    X-Request-ID:
      description: Unique request identifier for tracking and debugging
      schema:
        type: string
        format: uuid

    X-Rate-Limit-Limit:
      description: Rate limit ceiling for the current user
      schema:
        type: integer

    X-Rate-Limit-Remaining:
      description: Number of requests remaining in current window
      schema:
        type: integer

    X-Rate-Limit-Reset:
      description: When the rate limit window resets
      schema:
        type: string
        format: date-time

tags:
  - name: Health
    description: Health check and system status endpoints
  - name: Authentication
    description: OAuth2 authentication and token management
  - name: Search
    description: Music search and discovery endpoints
  - name: Tracks
    description: Track information and streaming endpoints
  - name: Streaming
    description: Audio streaming URL generation
  - name: Playlists
    description: Playlist management and manipulation
  - name: Favorites
    description: User favorites management
  - name: Discovery
    description: Music discovery and recommendations
  - name: User
    description: User profile and account information
  - name: Rate Limiting
    description: Rate limiting information and status

x-tagGroups:
  - name: Core API
    tags:
      - Health
      - Authentication
      - Search
  - name: Content Management
    tags:
      - Tracks
      - Playlists
      - Favorites
  - name: Audio Streaming
    tags:
      - Streaming
  - name: Discovery & Recommendations
    tags:
      - Discovery
  - name: User & Account
    tags:
      - User
      - Rate Limiting